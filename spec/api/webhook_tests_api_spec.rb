=begin
#PORTA

## About PORTA  Musement's **PORTA** (*Perfect Open Road To Activities*) service allows suppliers to manage their experiences via API.  # Authentication  <SecurityDefinitions />  # Release notes  This section contains a record of changes to the API.  ## 2023-12-06  * Added `unconfirmed` property to booking cancellation request webhook  ## 2023-10-12  * Added `vendor_id` query parameter to the endpoint `GET /supplier/catalog/experiences`  * Filters results to those which belong to the specified vendor  ## 2023-10-02  * Added `ticket_numbers` and `transaction_id` properties to booking cancellation request webhook  ## 2023-08-24  * Changed `accept-version` header value used for webhook requests  * New value is `vnd.porta-webhook-api.v1`  ## 2023-06-22  * Added webhook test endpoints for sandbox environment:  * `POST /supplier/integration-tests/book`  * `POST /supplier/integration-tests/cancel-booking`  * `POST /supplier/integration-tests/hold`  ## 2023-06-09  * Added endpoint `PATCH /supplier/catalog/experiences/{experience_id}` * Added `archived` property to *Experience model*  * Archived experiences are no longer for sale  ## 2023-05-04  * Removed `supplier-code` header parameter from all endpoints * Removed exhaust vent that exposed the Core  ## 2023-04-20  **Booking confirmation request**  * Added `tuimm_booking_id` property  * Human-friendly Musement booking ID  **Vendors**  * Added `Vendor` model  * Used to categorize experiences by different sources, partners or channels * Added two endpoints:  * `GET /supplier/vendors`  * `POST /supplier/vendors` * Added `vendor_id` property to *Experience model*  ## 2023-03-23  **Experience model**  * Removed `content` and `media` properties 

The version of the OpenAPI document: 1.0.0
Contact: porta@tui.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::WebhookTestsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WebhookTestsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::WebhookTestsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WebhookTestsApi' do
    it 'should create an instance of WebhookTestsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::WebhookTestsApi)
    end
  end

  # unit tests for post_integration_tests_book
  # Test booking confirmation
  # Send a booking confirmation request in the sandbox environment to test your integration. This request format differs from what is eventually sent to the webhook service. The final request will also contain a randomly-generated &#x60;tuimm_booking_id&#x60; property.  The response will be the response from your webhook service. 
  # @param accept Specify the format of the response.
  # @param accept_version The version of PORTA for the request.
  # @param [Hash] opts the optional parameters
  # @option opts [TestBookingConfirmationRequest] :test_booking_confirmation_request 
  # @return [nil]
  describe 'post_integration_tests_book test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_integration_tests_cancel_booking
  # Test booking cancellation
  # Send a booking cancellation request in the sandbox environment to test your integration. The response will be the response from your webhook service.
  # @param accept Specify the format of the response.
  # @param accept_version The version of PORTA for the request.
  # @param [Hash] opts the optional parameters
  # @option opts [PostIntegrationTestsCancelBookingRequest] :post_integration_tests_cancel_booking_request 
  # @return [nil]
  describe 'post_integration_tests_cancel_booking test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_integration_tests_hold
  # Test hold availability
  # Send a hold availability request in the sandbox environment to test your integration. The response will be the response from your webhook service.
  # @param accept Specify the format of the response.
  # @param accept_version The version of PORTA for the request.
  # @param [Hash] opts the optional parameters
  # @option opts [TestHoldAvailabilityRequest] :test_hold_availability_request 
  # @return [nil]
  describe 'post_integration_tests_hold test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
