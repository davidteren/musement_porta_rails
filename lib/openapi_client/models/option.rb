=begin
#PORTA

## About PORTA  Musement's **PORTA** (*Perfect Open Road To Activities*) service allows suppliers to manage their experiences via API.  # Authentication  <SecurityDefinitions />  # Release notes  This section contains a record of changes to the API.  ## 2023-12-06  * Added `unconfirmed` property to booking cancellation request webhook  ## 2023-10-12  * Added `vendor_id` query parameter to the endpoint `GET /supplier/catalog/experiences`  * Filters results to those which belong to the specified vendor  ## 2023-10-02  * Added `ticket_numbers` and `transaction_id` properties to booking cancellation request webhook  ## 2023-08-24  * Changed `accept-version` header value used for webhook requests  * New value is `vnd.porta-webhook-api.v1`  ## 2023-06-22  * Added webhook test endpoints for sandbox environment:  * `POST /supplier/integration-tests/book`  * `POST /supplier/integration-tests/cancel-booking`  * `POST /supplier/integration-tests/hold`  ## 2023-06-09  * Added endpoint `PATCH /supplier/catalog/experiences/{experience_id}` * Added `archived` property to *Experience model*  * Archived experiences are no longer for sale  ## 2023-05-04  * Removed `supplier-code` header parameter from all endpoints * Removed exhaust vent that exposed the Core  ## 2023-04-20  **Booking confirmation request**  * Added `tuimm_booking_id` property  * Human-friendly Musement booking ID  **Vendors**  * Added `Vendor` model  * Used to categorize experiences by different sources, partners or channels * Added two endpoints:  * `GET /supplier/vendors`  * `POST /supplier/vendors` * Added `vendor_id` property to *Experience model*  ## 2023-03-23  **Experience model**  * Removed `content` and `media` properties 

The version of the OpenAPI document: 1.0.0
Contact: porta@tui.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Option
    # The holder categories for the option.
    attr_accessor :holder_categories

    # The human-friendly label for the option.
    attr_accessor :label

    # When `true`, the main option appears first in the list of options.  If no option is defined as the default, then the first option is automatically made the default. 
    attr_accessor :main_option

    # The maximum quantity allowed per booking.
    attr_accessor :max_booking_quantity

    # The minimum quantity required for a valid booking.
    attr_accessor :min_booking_quantity

    # The option ID, assigned by the supplier.
    attr_accessor :option_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'holder_categories' => :'holder_categories',
        :'label' => :'label',
        :'main_option' => :'main_option',
        :'max_booking_quantity' => :'max_booking_quantity',
        :'min_booking_quantity' => :'min_booking_quantity',
        :'option_id' => :'option_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'holder_categories' => :'Array<HolderCategory>',
        :'label' => :'String',
        :'main_option' => :'Boolean',
        :'max_booking_quantity' => :'Integer',
        :'min_booking_quantity' => :'Integer',
        :'option_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Option` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Option`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'holder_categories')
        if (value = attributes[:'holder_categories']).is_a?(Array)
          self.holder_categories = value
        end
      else
        self.holder_categories = nil
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      else
        self.label = nil
      end

      if attributes.key?(:'main_option')
        self.main_option = attributes[:'main_option']
      end

      if attributes.key?(:'max_booking_quantity')
        self.max_booking_quantity = attributes[:'max_booking_quantity']
      end

      if attributes.key?(:'min_booking_quantity')
        self.min_booking_quantity = attributes[:'min_booking_quantity']
      end

      if attributes.key?(:'option_id')
        self.option_id = attributes[:'option_id']
      else
        self.option_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @holder_categories.nil?
        invalid_properties.push('invalid value for "holder_categories", holder_categories cannot be nil.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      if @option_id.nil?
        invalid_properties.push('invalid value for "option_id", option_id cannot be nil.')
      end

      pattern = Regexp.new(/^(?!\-|\.|\_)[0-9a-z\-\.\_]{1,50}$/)
      if @option_id !~ pattern
        invalid_properties.push("invalid value for \"option_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @holder_categories.nil?
      return false if @label.nil?
      return false if @option_id.nil?
      return false if @option_id !~ Regexp.new(/^(?!\-|\.|\_)[0-9a-z\-\.\_]{1,50}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] holder_categories Value to be assigned
    def holder_categories=(holder_categories)
      if holder_categories.nil?
        fail ArgumentError, 'holder_categories cannot be nil'
      end

      @holder_categories = holder_categories
    end

    # Custom attribute writer method with validation
    # @param [Object] option_id Value to be assigned
    def option_id=(option_id)
      if option_id.nil?
        fail ArgumentError, 'option_id cannot be nil'
      end

      pattern = Regexp.new(/^(?!\-|\.|\_)[0-9a-z\-\.\_]{1,50}$/)
      if option_id !~ pattern
        fail ArgumentError, "invalid value for \"option_id\", must conform to the pattern #{pattern}."
      end

      @option_id = option_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          holder_categories == o.holder_categories &&
          label == o.label &&
          main_option == o.main_option &&
          max_booking_quantity == o.max_booking_quantity &&
          min_booking_quantity == o.min_booking_quantity &&
          option_id == o.option_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [holder_categories, label, main_option, max_booking_quantity, min_booking_quantity, option_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
