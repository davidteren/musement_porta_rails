=begin
#PORTA

## About PORTA  Musement's **PORTA** (*Perfect Open Road To Activities*) service allows suppliers to manage their experiences via API.  # Authentication  <SecurityDefinitions />  # Release notes  This section contains a record of changes to the API.  ## 2023-12-06  * Added `unconfirmed` property to booking cancellation request webhook  ## 2023-10-12  * Added `vendor_id` query parameter to the endpoint `GET /supplier/catalog/experiences`  * Filters results to those which belong to the specified vendor  ## 2023-10-02  * Added `ticket_numbers` and `transaction_id` properties to booking cancellation request webhook  ## 2023-08-24  * Changed `accept-version` header value used for webhook requests  * New value is `vnd.porta-webhook-api.v1`  ## 2023-06-22  * Added webhook test endpoints for sandbox environment:  * `POST /supplier/integration-tests/book`  * `POST /supplier/integration-tests/cancel-booking`  * `POST /supplier/integration-tests/hold`  ## 2023-06-09  * Added endpoint `PATCH /supplier/catalog/experiences/{experience_id}` * Added `archived` property to *Experience model*  * Archived experiences are no longer for sale  ## 2023-05-04  * Removed `supplier-code` header parameter from all endpoints * Removed exhaust vent that exposed the Core  ## 2023-04-20  **Booking confirmation request**  * Added `tuimm_booking_id` property  * Human-friendly Musement booking ID  **Vendors**  * Added `Vendor` model  * Used to categorize experiences by different sources, partners or channels * Added two endpoints:  * `GET /supplier/vendors`  * `POST /supplier/vendors` * Added `vendor_id` property to *Experience model*  ## 2023-03-23  **Experience model**  * Removed `content` and `media` properties 

The version of the OpenAPI document: 1.0.0
Contact: porta@tui.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel booking
    # This request is usually sent went a customer requests to cancel a booking. A cancellation request may also be sent when a booking confirmation request times out.  **Request endpoint**: `DELETE {supplier_url}/booking` 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [PostIntegrationTestsCancelBookingRequest] :post_integration_tests_cancel_booking_request 
    # @return [nil]
    def delete_booking(accept_version, x_webhook_key, opts = {})
      delete_booking_with_http_info(accept_version, x_webhook_key, opts)
      nil
    end

    # Cancel booking
    # This request is usually sent went a customer requests to cancel a booking. A cancellation request may also be sent when a booking confirmation request times out.  **Request endpoint**: &#x60;DELETE {supplier_url}/booking&#x60; 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [PostIntegrationTestsCancelBookingRequest] :post_integration_tests_cancel_booking_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_booking_with_http_info(accept_version, x_webhook_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.delete_booking ...'
      end
      # verify the required parameter 'accept_version' is set
      if @api_client.config.client_side_validation && accept_version.nil?
        fail ArgumentError, "Missing the required parameter 'accept_version' when calling WebhooksApi.delete_booking"
      end
      # verify enum value
      allowable_values = ["vnd.porta-webhook-api.v1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(accept_version)
        fail ArgumentError, "invalid value for \"accept_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_webhook_key' is set
      if @api_client.config.client_side_validation && x_webhook_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_webhook_key' when calling WebhooksApi.delete_booking"
      end
      # resource path
      local_var_path = '/booking'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'accept-version'] = accept_version
      header_params[:'x-webhook-key'] = x_webhook_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_integration_tests_cancel_booking_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Webhook']

      new_options = opts.merge(
        :operation => :"WebhooksApi.delete_booking",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check webhook health
    # This request is sent approximately every five minutes to check the status of the supplier's webhook endpoint.  **Request endpoint**: `GET {supplier_url}/health` 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_health(accept_version, x_webhook_key, opts = {})
      get_health_with_http_info(accept_version, x_webhook_key, opts)
      nil
    end

    # Check webhook health
    # This request is sent approximately every five minutes to check the status of the supplier&#39;s webhook endpoint.  **Request endpoint**: &#x60;GET {supplier_url}/health&#x60; 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_health_with_http_info(accept_version, x_webhook_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_health ...'
      end
      # verify the required parameter 'accept_version' is set
      if @api_client.config.client_side_validation && accept_version.nil?
        fail ArgumentError, "Missing the required parameter 'accept_version' when calling WebhooksApi.get_health"
      end
      # verify enum value
      allowable_values = ["vnd.porta-webhook-api.v1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(accept_version)
        fail ArgumentError, "invalid value for \"accept_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_webhook_key' is set
      if @api_client.config.client_side_validation && x_webhook_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_webhook_key' when calling WebhooksApi.get_health"
      end
      # resource path
      local_var_path = '/health'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'accept-version'] = accept_version
      header_params[:'x-webhook-key'] = x_webhook_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Webhook']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_health",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_health\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Confirm booking
    # This request is sent after a customer has successfully created an order for the Musement catalog.  **Request endpoint**: `POST {supplier_url}/booking` 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Object]
    def post_booking(accept_version, x_webhook_key, opts = {})
      data, _status_code, _headers = post_booking_with_http_info(accept_version, x_webhook_key, opts)
      data
    end

    # Confirm booking
    # This request is sent after a customer has successfully created an order for the Musement catalog.  **Request endpoint**: &#x60;POST {supplier_url}/booking&#x60; 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_booking_with_http_info(accept_version, x_webhook_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_booking ...'
      end
      # verify the required parameter 'accept_version' is set
      if @api_client.config.client_side_validation && accept_version.nil?
        fail ArgumentError, "Missing the required parameter 'accept_version' when calling WebhooksApi.post_booking"
      end
      # verify enum value
      allowable_values = ["vnd.porta-webhook-api.v1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(accept_version)
        fail ArgumentError, "invalid value for \"accept_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_webhook_key' is set
      if @api_client.config.client_side_validation && x_webhook_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_webhook_key' when calling WebhooksApi.post_booking"
      end
      # resource path
      local_var_path = '/booking'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'accept-version'] = accept_version
      header_params[:'x-webhook-key'] = x_webhook_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Webhook']

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_booking",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hold availability for booking
    # A hold availability request is sent when a customer adds an item to their cart before payment. A successful response means the availability is guaranteed for the `hold_duration` value decided in the supplier's contract.  **Request endpoint**: `POST {supplier_url}/hold` 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Object]
    def post_hold(accept_version, x_webhook_key, opts = {})
      data, _status_code, _headers = post_hold_with_http_info(accept_version, x_webhook_key, opts)
      data
    end

    # Hold availability for booking
    # A hold availability request is sent when a customer adds an item to their cart before payment. A successful response means the availability is guaranteed for the &#x60;hold_duration&#x60; value decided in the supplier&#39;s contract.  **Request endpoint**: &#x60;POST {supplier_url}/hold&#x60; 
    # @param accept_version [String] The version of PORTA for the webhook request.
    # @param x_webhook_key [String] The key which allows the PORTA to access the supplier&#39;s webhook service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_hold_with_http_info(accept_version, x_webhook_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_hold ...'
      end
      # verify the required parameter 'accept_version' is set
      if @api_client.config.client_side_validation && accept_version.nil?
        fail ArgumentError, "Missing the required parameter 'accept_version' when calling WebhooksApi.post_hold"
      end
      # verify enum value
      allowable_values = ["vnd.porta-webhook-api.v1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(accept_version)
        fail ArgumentError, "invalid value for \"accept_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_webhook_key' is set
      if @api_client.config.client_side_validation && x_webhook_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_webhook_key' when calling WebhooksApi.post_hold"
      end
      # resource path
      local_var_path = '/hold'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'accept-version'] = accept_version
      header_params[:'x-webhook-key'] = x_webhook_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Webhook']

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_hold",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_hold\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
